<?xml version='1.0' standalone='yes'?>
<PLUGIN>

<!--
This UnRaid plugin will mount any drive, which is not part of the array
at a configureable mount point
-->

<FILE Name="/boot/packages/inotify-tools-3.14-i486-1.txz" Run="upgradepkg --install-new">
<URL>http://slackware.cs.utah.edu/pub/slackware/slackware-14.0/slackware/a/inotify-tools-3.14-i486-1.txz</URL>
<MD5>5aa51a1d2c56cab72c582c07ff907f9d</MD5>
</FILE>

<FILE Name="/boot/config/plugins/drive_mount/drive_mount.png">
<URL>--no-check-certificate https://github.com/Benni-chan/unraid_plugins/raw/master/support_files/drive_mount.png</URL>
</FILE>

<FILE Name="/tmp/drive_mount-cleanup" Run="/bin/bash">
<INLINE>
<![CDATA[
[ -d /usr/local/emhttp/plugins/drive_mount ] && rm -f -R /usr/local/emhttp/plugins/drive_mount
[ -f /boot/config/plugins/drive_mount/drive_mount.sh ] && rm -f /boot/config/plugins/drive_mount/drive_mount.sh
rm /tmp/drive_mount-cleanup
]]>
</INLINE>
</FILE>

<FILE Name="/boot/config/plugins/drive_mount/drive_mount.cfg">
<INLINE>
<![CDATA[
# empty configuration
]]>
</INLINE>
</FILE>

<FILE Name="/boot/config/plugins/drive_mount/drive_smb_shares.cfg">
<INLINE>
<![CDATA[
]]>
</INLINE>
</FILE>

<FILE Name="/boot/config/plugins/drive_mount/drive_mount.sh" Mode="0770">
<INLINE>
<![CDATA[
#!/bin/bash
#set -x

write_config() {
		echo "# drive_mount configuration" > /boot/config/plugins/drive_mount/drive_mount.cfg
		for INDEX in ${!device_uuid[@]}; do
			echo "[${device_uuid[$INDEX]}]" >> /boot/config/plugins/drive_mount/drive_mount.cfg
			echo "DRIVE_ID=\"${device_id[$INDEX]}\"" >> /boot/config/plugins/drive_mount/drive_mount.cfg
			echo "DRIVE_NAME=\"${device_disk[$INDEX]}\"" >> /boot/config/plugins/drive_mount/drive_mount.cfg
			echo "DRIVE_MOUNT=\"${device_mount[$INDEX]}\"" >> /boot/config/plugins/drive_mount/drive_mount.cfg
			echo "DRIVE_MOUNTED=\"${device_mounted[$INDEX]}\"" >> /boot/config/plugins/drive_mount/drive_mount.cfg
			echo "DRIVE_ENABLED=\"${device_enabled[$INDEX]}\"" >> /boot/config/plugins/drive_mount/drive_mount.cfg
			echo "DRIVE_LABEL=\"${device_label[$INDEX]}\"" >> /boot/config/plugins/drive_mount/drive_mount.cfg
			echo "DRIVE_SIZE=\"${device_size[$INDEX]}\"" >> /boot/config/plugins/drive_mount/drive_mount.cfg
			echo "DRIVE_FORMAT=\"${device_format[$INDEX]}\"" >> /boot/config/plugins/drive_mount/drive_mount.cfg
			echo "SMB_EXPORT=\"${device_smb_export[$INDEX]}\"" >> /boot/config/plugins/drive_mount/drive_mount.cfg
			echo "SMB_SEC=\"${device_smb_sec[$INDEX]}\"" >> /boot/config/plugins/drive_mount/drive_mount.cfg
		done
}

cfg.parser () {
	if [[ `grep -F "[" $1` != "" ]]; then
		ini="$(<$1)"				# read the file
		ini="${ini//[/\[}"			# escape [
		ini="${ini//]/\]}"			# escape ]
		IFS=$'\n' && ini=( ${ini} ) # convert to line-array
		ini=( ${ini[*]//;*/} )		# remove comments with ;
		ini=( ${ini[*]//#*/} )		# remove comments with #
		ini=( ${ini[*]/\	=/=} )	# remove tabs before =
		ini=( ${ini[*]/=\	/=} )	# remove tabs be =
		ini=( ${ini[*]/\ =\ /=} )	# remove anything with a space around =
		ini=( ${ini[*]/#\\[/\}$'\n'cfg.section.} ) # set section prefix
		ini=( ${ini[*]/%\\]/ \(} )	  # convert text2function (1)
		ini=( ${ini[*]/=/=\( } )	# convert item to array
		ini=( ${ini[*]/%/ \)} )		# close array parenthesis
		ini=( ${ini[*]/%\\ \)/ \\} ) # the multiline trick
		ini=( ${ini[*]/%\( \)/\(\) \{} ) # convert text2function (2)
		ini=( ${ini[*]/%\} \)/\}} ) # remove extra parenthesis
		ini[0]="" # remove first element
		ini[${#ini[*]} + 1]='}'	   # add the last brace
		eval "$(echo "${ini[*]}")" # eval the resul
	fi
}

cfg.writer () {
	IFS=' '$'\n'
	fun="$(declare -F)"
	fun="${fun//declare -f/}"
	for f in $fun; do
		[ "${f#cfg.section}" == "${f}" ] && continue
		item="$(declare -f ${f})"
		item="${item##*\{}"
		item="${item%\}}"
		item="${item//=*;/}"
		vars="${item//=*/}"
		eval $f
		echo "[${f#cfg.section.}]"
		for var in $vars; do
			echo $var=\"${!var}\"
		done
	done
}

update_drives() {
	function exists_name {
		for INDEX in ${!drive_name[@]}; do
			if [ "${drive_name[$INDEX]}" == "$1" ]; then
				echo "$INDEX"
			fi
		done
	}
	
	# if disks.ini is found, check for new drives and remove array drives from list
	if [ -f /var/local/emhttp/disks.ini ]; then
		exec </var/local/emhttp/disks.ini
		let a=0
		while read ini
		do
			case $ini in
				deviceSb*)
					continue #ignore deviceSb lines in disks.ini
				;;
				device*)
					device=`echo "$ini" | sed -e "s/\([^=]*\)=\([^=]*\)/\2/" -e "s/\\r//" -e "s/\"//g"`
					drive_name[$a]="$device"
					let a=a+1
			esac
		done
		
		let a=0
		disks=`ls --time-style="+%Y-%m-%d %I:%M%p" /dev/disk/by-uuid/* -l | cut -c64-`
		
		while IFS=$'\n' read -ra VAR; do 
			for i in "${VAR[@]}"
			do
				partition=`echo $i | cut -d " " -f 3 | cut -c7-`
				disk=`echo $partition | cut -c-3`
				uuid=`echo $i | cut -d " " -f 1`
				
				m=`mount | grep "/dev/$partition" | cut -d " " -f 3 | cut -c6-`
				
				# check if not part of array
				if [ "$(exists_name $disk)" == "" ]; then
					
					id=`ls --time-style="+%Y-%m-%d %I:%M%p" /dev/disk/by-id/* -l | grep -v -- "-part" | grep -v -- "wwn" | grep -v -- "scsi-SATA" | grep "/$disk" | cut -c66- | cut -d " " -f 1`
					
					fn_exists "cfg.section.$uuid"
					if [ $? -eq 0 ]; then
						cfg.section.$uuid
						
						old_mount=$DRIVE_MOUNT
						old_enabled=$DRIVE_ENABLED
						old_smb_export=$SMB_EXPORT
						old_smb_sec=$SMB_SEC
					else
						old_mount=""
						old_enabled=""
						old_smb_export=""
						old_smb_sec=""
					fi
					
					if [ "$m" != "" ]; then
						enabled="enable"
					elif [ "$old_enabled" == "" ]; then
						enabled="disable"
					else
						enabled=$old_enabled
					fi

					if [[ "$old_mount" == "" || "$old_mount" == "$m" ]]; then
						mpoint=$m
					elif [ "$m" == "" ]; then
						mpoint=$old_mount
					fi

					if [ "$m" != "" ]; then
						mounted="enable"
					else
						mounted="disable"
					fi
					
					filesystem=`blkid -o value -s TYPE "/dev/disk/by-uuid/$uuid"`
					label=`blkid -o value -s LABEL "/dev/disk/by-uuid/$uuid"`
					size=`blockdev --getsize64 /dev/$partition`
					
					device_uuid[$a]="$uuid"
					device_disk[$a]="$partition"
					device_id[$a]="$id"
					device_mount[$a]="$mpoint"
					device_mounted[$a]="$mounted"
					device_enabled[$a]="$enabled"
					device_format[$a]="$filesystem"
					device_label[$a]="$label"
					device_size[$a]="$size"
					device_smb_export[$a]="$old_smb_export"
					device_smb_sec[$a]="$old_smb_sec"
					
					let a=a+1
				fi
			done
		done <<< "$disks"
	else # otherwise just check if drives in config are mounted
		let a=0
		
		disks=`ls --time-style="+%Y-%m-%d %I:%M%p" /dev/disk/by-uuid/* -l | cut -c64-`
		while IFS=$'\n' read -ra VAR; do
			for i in "${VAR[@]}"; do
				partition=`echo $i | cut -d " " -f 3 | cut -c7-`
				disk=`echo $partition | cut -c-3`
				uuid=`echo $i | cut -d " " -f 1`

				m=`mount | grep "/dev/$partition" | cut -d " " -f 3 | cut -c6-`
				
				id=`ls --time-style="+%Y-%m-%d %I:%M%p" /dev/disk/by-id/* -l | grep -v -- "-part" | grep -v -- "wwn" | grep -v -- "scsi-SATA" | grep "/$disk" | cut -c66- | cut -d " " -f 1`
				
				fn_exists "cfg.section.$uuid"
				if [ $? -eq 0 ]; then
					cfg.section.$uuid
					
					if [ "$m" != "" ]; then
						mounted="enable"
					else
						mounted="disable"
					fi
					
					filesystem=`blkid -o value -s TYPE "/dev/disk/by-uuid/$uuid"`
					label=`blkid -o value -s LABEL "/dev/disk/by-uuid/$uuid"`
					size=`blockdev --getsize64 /dev/$partition`
					
					device_uuid[$a]="$uuid"
					device_disk[$a]="$partition"
					device_id[$a]="$id"
					device_mount[$a]="$mpoint"
					device_mounted[$a]="$mounted"
					device_enabled[$a]="$enabled"
					device_format[$a]="$filesystem"
					device_label[$a]="$label"
					device_size[$a]="$size"
					device_smb_export[$a]="$old_smb_export"
					device_smb_sec[$a]="$old_smb_sec"
					
					let a=a+1
					
				else
					continue
				fi
			done
		done <<< "$disks"
	fi
	
}

mount_all()
{
	for INDEX in "${!device_id[@]}"; do
		if [[ ${device_enabled[$INDEX]} == "enable" && ${device_mounted[$INDEX]} != "enable" ]]; then
			if [[ ! -d /mnt/${device_mount[$INDEX]} || ! "$(ls -A /mnt/${device_mount[$INDEX]})" ]]; then
				mount_drive ${device_uuid[$INDEX]} ${device_mount[$INDEX]} ${device_disk[$INDEX]}
			fi
		fi
	done
	
	update_drives
	write_config
	sleep 2
	smb_update
}

mount_drive()
{
	diskuuid=$1
	mountpoint=/mnt/$2
	diskname=$3
	
	filesystem=`blkid -o value -s TYPE "/dev/disk/by-uuid/$diskuuid"`
	if [ -z "$filesystem" ]
	then
		echo "Error opening partition or maybe no filesystem exists, cannot be mounted for device: $diskid"
		exit 1
	fi
	
	case "$filesystem" in
	'reiserfs')
		echo "mounting $diskname"
		mkdir -p $mountpoint
		mount -o noatime,nodiratime -t reiserfs -U $diskuuid $mountpoint 2>&1
		chown nobody:users $mountpoint
		chmod 770 $mountpoint
	;;
	'ntfs')
		if [ -f /bin/ntfs-3g ]
		then
			echo "mounting $diskid"
			mkdir -p $mountpoint
			mount -o umask=111,dmask=000 -t ntfs-3g -U $diskuuid $mountpoint 2>&1
			chown nobody:users $mountpoint
			chmod 770 $mountpoint
		else
			# mount the partition using the built in ntfs driver which is a readonly driver...
			echo "mounting $diskid"
			mkdir -p $mountpoint
			mount -r -o umask=111,dmask=000 -t ntfs -U $diskuuid $mountpoint 2>&1
			chown nobody:users $mountpoint
			chmod 770 $mountpoint
		fi
	;;
	'vfat')
		echo "mounting $diskid"
		mkdir -p $mountpoint
		mount -o rw,noauto,users,gid=users,exec,dmask=007,fmask=007,umask=017,noatime,nodiratime,shortname=mixed -t vfat -U $diskuuid $mountpoint 2>&1
	;;
	'msdos')
		echo "mounting $diskid"
		mkdir -p $mountpoint
		mount -r -t msdos -U $diskuuid $mountpoint 2>&1
		chown nobody:users $mountpoint
		chmod 770 $mountpoint
	;;
	'ext2')
		echo "mounting $diskid"
		mkdir -p $mountpoint
		mount -r -t ext2 -U $diskuuid $mountpoint 2>&1
		chown nobody:users $mountpoint
		chmod 770 $mountpoint
	;;
	'ext3')
		echo "mounting $diskid"
		mkdir -p $mountpoint
		# no support for ext3, try to mount it as ext2.
		mount -r -t ext2 -U $diskuuid $mountpoint 2>&1
		chown nobody:users $mountpoint
		chmod 770 $mountpoint
	;;
	'hfsplus')
		echo "mounting $diskid"
		mkdir -p $mountpoint
		mount -t hfsplus -U $diskuuid $mountpoint 2>&1
		chown nobody:users $mountpoint
		chmod 770 $mountpoint
	;;
	*)
		# mount the partition ...
		echo "Mounting filesystem for $diskid not attempted: Filesystem ($filesystem) is not supported."
		exit
	;;
	esac
}

enable_drive()
{
	function exists_id {
		for INDEX in ${!device_uuid[@]}; do
			if [ "${device_uuid[$INDEX]}" == "$1" ]; then
				echo "$INDEX"
			fi
		done
	}
	
	a=$(exists_id $1)
	fn_exists "cfg.section.$1"
	if [ $? -eq 0 ]; then
		cfg.section.$1
		
		if [ $DRIVE_MOUNTED != "enable" ]; then
			device_mount[$a]=$2
			
			if [[ ! -d $2 || ! "$(ls -A $2)" ]]; then
				mount_drive $1 $2
				device_enabled[$a]="enable"
			fi
			write_config
		fi
	fi
	update_drives
	smb_update
}

disable_drive()
{
	function exists_id {
		for INDEX in ${!device_uuid[@]}; do
			if [ "${device_uuid[$INDEX]}" == "$1" ]; then
				echo "$INDEX"
			fi
		done
	}
	
	a=$(exists_id $1)
	fn_exists "cfg.section.$1"
	if [ $? -eq 0 ]; then
		cfg.section.$1
		
		device_enabled[$a]="disable"
		if [ $DRIVE_MOUNTED == "enable" ]; then
			umount /dev/disk/by-uuid/$1
			rmdir /mnt/$DRIVE_MOUNT
		else
			device_mount[$a]=$2
		fi
		write_config
	fi
	
	smb_update
}

fn_exists()
{
	type $1 2>/dev/null | grep -q 'is a function'
}

smb_update()
{
	rm -f /boot/config/plugins/drive_mount/drive_smb_shares.cfg
	touch /boot/config/plugins/drive_mount/drive_smb_shares.cfg
	
	for INDEX in "${!device_uuid[@]}"; do
		if [[ ${device_enabled[$INDEX]} == "enable" && ${device_mounted[$INDEX]} == "enable" ]]; then
			if [[ ${device_smb_export[$INDEX]} != "-" ]]; then
				echo "[${device_mount[$INDEX]}]" >> /boot/config/plugins/drive_mount/drive_smb_shares.cfg
				echo "	path = /mnt/${device_mount[$INDEX]}" >> /boot/config/plugins/drive_mount/drive_smb_shares.cfg
				echo "	browseable = yes" >> /boot/config/plugins/drive_mount/drive_smb_shares.cfg
				echo "	public = yes" >> /boot/config/plugins/drive_mount/drive_smb_shares.cfg
				echo "	writeable = yes" >> /boot/config/plugins/drive_mount/drive_smb_shares.cfg
			fi
		fi
	done
	echo "restarting SMB"
	#CMDLINE="/etc/rc.d/rc.samba restart"
	#nohup $CMDLINE > /dev/null 2>&1 &
	/etc/rc.d/rc.samba restart > /dev/null 2>&1 &
	sleep 3
	echo "... OK"
}

smb_config()
{
	function exists_id {
		for INDEX in ${!device_uuid[@]}; do
			if [ "${device_uuid[$INDEX]}" == "$1" ]; then
				echo "$INDEX"
			fi
		done
	}
	
	a=$(exists_id $1)
	
	fn_exists "cfg.section.$1"
	if [ $? -eq 0 ]; then
		cfg.section.$1

		device_smb_export[$a]=$2
		device_smb_sec[$a]=$3
		write_config
	fi
	
	smb_update
}


# read our configuration
cfg.parser '/boot/config/plugins/drive_mount/drive_mount.cfg'

update_drives

case "$1" in
'update')
  write_config
  ;;
'enable')
  enable_drive $2 $3
  ;;
'disable')
  disable_drive $2 $3
  ;;
'mount')
  mount_all
  ;;
'smb_config')
  smb_config $2 $3 $4
  ;;
'smb_update')
  smb_update
  ;;
*)
  echo "usage $0 enable|disable|mount|update|smb_update"
esac

]]>
</INLINE>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/drive_mount/drive_mount.page">
<INLINE>
<![CDATA[
Menu="OtherSettings"
Icon="drive_mount.png"
Version="0.5"
Author="Benjamin Waller"
Type="php"
Title="Mount Drives"
]]>
</INLINE>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/drive_mount/drive_mount.png">
<LOCAL>/boot/config/plugins/drive_mount/drive_mount.png</LOCAL>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/drive_mount/drive_mount.php">
<INLINE>
<![CDATA[
<?PHP
shell_exec("/boot/config/plugins/drive_mount/drive_mount.sh update");
$drive_mount_cfg = parse_ini_file( "/boot/config/plugins/drive_mount/drive_mount.cfg",TRUE);
?>
<style type="text/css" media="screen">
.disk_add, .disk_sel {
	display: inline-block;
	padding: 8px;
	margin: 0 4px 15px 4px;
}
.disk_add img, .disk_sel img {
	margin-bottom: 5px;
}
.disk_sel a {
	font-weight: bold;
}
.disk_sel {
	background: #D8DFEE;
	border-radius: 5px;
}
img.off {
	opacity: 0.5;
	filter:alpha(opacity=50);
}
</style>
<link type="text/css" rel="stylesheet" href="<?=$sf?>/style/jquery.stylesidebar.css">
<script type="text/javascript" src="<?=$sf?>/scripts/jquery.stylesidebar.js"></script>

<?PHP
foreach ($drive_mount_cfg as $drive_uuid => $drive_values)
{
  if ($drive_values['DRIVE_NAME']) {
    if (!isset($uuid)) $uuid = $drive_uuid;
	$mounted = ($drive_values['DRIVE_MOUNTED']=="enable")?"on":"off";
    echo "<div class='".($uuid==$drive_uuid ? "disk_sel" : "disk_add")."'>";
    echo "<center><a href='/$path?uuid=$drive_uuid'><img src='/plugins/drive_mount/drive_mount.png' id='".$drive_values['DRIVE_NAME']."' class='$mounted'><br>".$drive_values['DRIVE_NAME']."</a></center></div>";
  }
}
echo "<div class='".($uuid=="SETTINGS" ? "disk_sel" : "disk_add")."'>";
echo "<center><a href='/$path?uuid=SETTINGS'><img src='/plugins/simpleFeatures/images/settings.png' id='SETTINGS' class='on'><br>Settings</a></center></div>";
$host = substr($drive_mount_cfg[$uuid]['DRIVE_NAME'],0,-1);

?>
<br>
<?PHP
if ($uuid == "SETTINGS") {
?>
Soon:<br>
install ntfs-3g<br>
settings to remember disks and auto mount<br>

<?PHP
} else {
?>

<div id="menuDiv" style="overflow:hidden">
<ul id="SystemProfilerStyleSidebar">
<li class="ajaxlink"><a href="/plugins/drive_mount/mount.php?cmd=IDENTITY&uuid=<?=$uuid?>">Partition identity</a></li>
<li class="ajaxlink"><a href="/plugins/drive_mount/mount.php?cmd=SETTINGS&uuid=<?=$uuid?>" id="mount_settings">Mount settings</a></li>
<li class="ajaxlink"><a href="/plugins/drive_mount/mount.php?cmd=SHARE&uuid=<?=$uuid?>">Share settings</a></li>
<?PHP
// only display disk health links, if disk health simple features is installed
if (file_exists("/usr/local/emhttp/plugins/simpleFeatures/include/SmartInfo.php")) {
?>
<li class="ajaxlink"><a href="<?=$sf?>/include/SmartInfo.php?cmd=IDENTITY&device=<?=$host?>">Disk identity</a></li>
<li class="ajaxlink"><a href="<?=$sf?>/include/SmartInfo.php?cmd=ATTRIBUTES&device=<?=$host?>">Disk attributes</a></li>
<li class="ajaxlink"><a href="<?=$sf?>/include/SmartInfo.php?cmd=CAPABILITIES&device=<?=$host?>">Disk capabilities</a></li>
<li class="ajaxlink"><a href="<?=$sf?>/include/SmartInfo.php?cmd=TESTLOG&device=<?=$host?>">Disk self-test log</a></li>
<li class="ajaxlink"><a href="<?=$sf?>/include/SmartInfo.php?cmd=ERRORLOG&device=<?=$host?>">Disk error log</a></li>
<li class="ajaxlink"><a href="<?=$sf?>/include/SmartInfo.php?cmd=SELFTEST&device=<?=$host?>">Run disk self-test</a></li>
<?PHP
}
?>
</ul>
<div id="mainContent"><!-- content  --></div>
</div>
<script type="text/javascript">

$(document).ready(function(){
  $(function(){$('li').StyleSidebar({displayDivId:'mainContent'});});
});
</script>

<?PHP
}
?>

]]>
</INLINE>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/drive_mount/mount.php">
<INLINE>
<![CDATA[
<?PHP
parse_str($argv[1],$_GET);
$drive_mount_cfg = parse_ini_file( "/boot/config/plugins/drive_mount/drive_mount.cfg",TRUE);
$drive_uuid = $_GET['uuid'];
$drive_values = $drive_mount_cfg[$drive_uuid];


switch ($_GET['cmd']):
case "IDENTITY":

function formatBytes($bytes, $precision = 2) { 
    $units = array('B', 'KB', 'MB', 'GB', 'TB'); 

    $bytes = max($bytes, 0); 
    $pow = floor(($bytes ? log($bytes) : 0) / log(1024)); 
    $pow = min($pow, count($units) - 1); 

    // Uncomment one of the following alternatives
    //$bytes /= pow(1024, $pow);
    $bytes /= (1 << (10 * $pow)); 

    return round($bytes, $precision) . ' ' . $units[$pow]; 
} 


?>
	<div class='label'><span class='left'>Partition identity</span></div>
	<table class='list'>
		<tr>
			<td width="100px">UUID</td>
			<td><?=$drive_uuid?></td>
		</tr>
		<tr>
			<td width="100px">ID</td>
			<td><?=$drive_values['DRIVE_NAME']?></td>
		</tr>
		<tr>
			<td width="100px">Label</td>
			<td><?=$drive_values['DRIVE_LABEL']?></td>
		</tr>
		<tr>
			<td width="100px">Size</td>
			<td><?=formatBytes($drive_values['DRIVE_SIZE'])?></td>
		</tr>
		<tr>
			<td width="100px">Format</td>
			<td><?=$drive_values['DRIVE_FORMAT']?></td>
		</tr>
		<tr>
			<td width="100px">Mounted</td>
			<td><?=($drive_values['DRIVE_MOUNTED']!="disable")?"Yes":"No"?></td>
		</tr>
		<tr>
			<td width="100px">Shared</td>
			<td><?=($drive_values['SMB_EXPORT']!="-")?"Yes":"No"?></td>
		</tr>
	</table>
	<?PHP
	break;
case "SETTINGS":
?>
	<div class='label'><span class='left'>Mount settings</span></div>
	<table class='settings'>
		<form name="drive_mount_settings" method="POST" action="/update.htm" target="progressFrame">
			<input type="hidden" name="cmd" value="/boot/config/plugins/drive_mount/drive_mount.sh">
			<input type="hidden" name="arg2" value="<?=$drive_uuid?>">
			<tr>
				<td>Enable Drive:</td>
				<td><select name="arg1" size="1"  onChange="checkMOUNTED(this.form,'<?=$drive_values['DRIVE_MOUNTED']?>');">
					<option value="disable"<?=($drive_values['DRIVE_ENABLED']=="disable")?" selected":"" ?>>No</option>
					<option value="enable"<?=($drive_values['DRIVE_ENABLED']=="enable")?" selected":"" ?>>Yes</option>
				</select></td>
			</tr>
			<tr>
				<td>Drive name:</td>
				<td><input type="text" name="arg3" maxlength="100" value="<?=$drive_values['DRIVE_MOUNT'];?>"></td>
			</tr>
			<tr>
				<td>
				</td>
				<td><button type="button" id="mount_submit">Apply</button></td>
			</tr>
		</form>
	</table>
	<script type="text/javascript">
		function checkMOUNTED(form,mounted)
		{
			if (mounted == "enable") {
				form.arg3.readOnly = true;
			}
			else {
				form.arg3.readOnly = (form.arg1.value == "enable");
			}
		}
		
		checkMOUNTED(document.drive_mount_settings,'<?=$drive_values['DRIVE_MOUNTED']?>');
		
		$(document).ready(function(){
			$("button[id=mount_submit]").click(function(){
				$(this).attr('disabled',true);
				$.ajax({
					url:'/plugins/drive_mount/mount.php',
					data:{
						cmd: "SETMOUNT",
						set: $('select[name=arg1]').val(),
						uuid: $('input[name=arg2]').val(),
						name: $('input[name=arg3]').val()
					}
				}).done(function(){
					$("button[id=mount_submit]").attr('disabled',false);
					$("a[id=mount_settings]").click();
				});
			});
		});
		
	</script>

<?PHP
	break;
case "SHARE":
	?>
	<div class='label'><span class='left'>Share settings: <?=$drive_values['DRIVE_MOUNT']?></span></div>
	<table class='settings'>
		<form method="POST" name="drive_mount_smb_settings" action="/update.htm" target="progressFrame">
			<input type="hidden" name="cmd" value="/boot/config/plugins/drive_mount/drive_mount.sh">
			<input type="hidden" name="arg1" value="smb_config">
			<input type="hidden" name="arg2" value="<?=$drive_uuid?>">
			<tr><td>NOTE:</td><td>sharing the mounted drive is beta. currently it works with reiserfs formated drives. fat32 doesn't work. ntfs is unknown</td></tr>
			<tr>
				<td>Export:</td>
				<td><select name="arg3" size="1">
					<option value="-"<?=($drive_values['SMB_EXPORT']=="-")?" selected":"" ?>>No</option>
					<option value="e"<?=($drive_values['SMB_EXPORT']=="e")?" selected":"" ?>>Yes</option>
					<option value="eh"<?=($drive_values['SMB_EXPORT']=="eh")?" selected":"" ?>>Yes (hidden)</option>
				</select></td>
			</tr>
			<tr>
				<td>Security:</td>
				<td><select name="arg4" size="1">
					<option value="public"<?=($drive_values['SMB_SEC']=="public")?" selected":"" ?>>Public</option>
					<option value="secure"<?=($drive_values['SMB_SEC']=="secure")?" selected":"" ?> disabled>Secure</option>
					<?       if ($var['featureSecurityUser']): ?>
					<option value="private"<?=($drive_values['SMB_SEC']=="private")?" selected":"" ?> disabled>Private</option>
					<?       else: ?>
					<option value="private"<?=($drive_values['SMB_SEC']=="private")?" selected":"" ?> disabled>Private</option>
					<?       endif; ?>
				</select></td>
			</tr>
			<tr>
				<td></td>
				<td><button type="button" id="smb_submit">Apply</button></td>
			</tr>
		</form>
	</table>
	<script type="text/javascript" charset="utf-8">
	$(document).ready(function(){
		$("button[id=smb_submit]").click(function(){
			$(this).attr('disabled',true);
			$.ajax({
				url:'/plugins/drive_mount/mount.php',
				data:{
					cmd: "SETSHARE",
					uuid: $('input[name=arg2]').val(),
					export: $('select[name=arg3]').val(),
					security: $('select[name=arg4]').val()
				}
			}).done(function(){
				$("button[id=smb_submit]").attr('disabled',false);
			});
		});
	});
	</script>
	<?PHP
	break;
case "SETMOUNT":
	$uuid = $_GET['uuid'];
	$set = $_GET['set'];
	$name = $_GET['name'];
	
	shell_exec("/boot/config/plugins/drive_mount/drive_mount.sh $set $uuid $name");
	
	shell_exec("/boot/config/plugins/drive_mount/drive_mount.sh update");
	break;
case "SETSHARE":
	$uuid = $_GET['uuid'];
	$export = $_GET['export'];
	$security = $_GET['security'];
	
	shell_exec("/boot/config/plugins/drive_mount/drive_mount.sh smb_config $uuid $export $security");
	
	shell_exec("/boot/config/plugins/drive_mount/drive_mount.sh update");
	break;
endswitch;

?>

]]>
</INLINE>
</FILE>

<FILE Name="/tmp/drive_mount-install" Run="/bin/bash">
<INLINE>
<![CDATA[
# include smb share config
share_line="include = /boot/config/plugins/drive_mount/drive_smb_shares.cfg"
share_line_config=`cat /boot/config/smb-extra.conf | grep "$share_line"`

if [[ $share_line_config == "" ]]; then
	echo "$share_line" >> /boot/config/smb-extra.conf
fi

# update drives and mount enabled ones
/boot/config/plugins/drive_mount/drive_mount.sh mount

# clean up
rm /tmp/drive_mount-install
]]>
</INLINE>
</FILE>

<FILE Name="/var/log/plugins/drive_mount">
<INLINE>
<![CDATA[

]]>
</INLINE>
</FILE>

</PLUGIN>
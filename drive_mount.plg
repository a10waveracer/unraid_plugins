<?xml version='1.0' standalone='yes'?>
<PLUGIN>

<!--
This UnRaid plugin will mount any drive, which is not part of the array
at a configureable mount point
-->

<FILE Name="/boot/config/plugins/drive_mount/drive_mount.png">
<URL>--no-check-certificate https://github.com/Benni-chan/unraid_plugins/raw/master/support_files/drive_mount.png</URL>
</FILE>

<FILE Name="/tmp/drive_mount-cleanup" Run="/bin/bash">
<INLINE>
<![CDATA[
[ -d /usr/local/emhttp/plugins/drive_mount ] && rm -f -R /usr/local/emhttp/plugins/drive_mount
[ -f /boot/config/plugins/drive_mount/drive_mount.sh ] && rm -f /boot/config/plugins/drive_mount/drive_mount.sh
rm /tmp/drive_mount-cleanup
]]>
</INLINE>
</FILE>

<FILE Name="/boot/config/plugins/drive_mount/drive_mount.cfg">
<INLINE>
<![CDATA[
# empty configuration
]]>
</INLINE>
</FILE>

<FILE Name="/boot/config/plugins/drive_mount/drive_smb_shares.cfg">
<INLINE>
<![CDATA[
]]>
</INLINE>
</FILE>

<FILE Name="/boot/config/plugins/drive_mount/drive_mount.sh" Mode="0770">
<INLINE>
<![CDATA[
#!/bin/bash
#set -x

write_config() {
		echo "# drive_mount configuration" > /boot/config/plugins/drive_mount/drive_mount.cfg
		for INDEX in ${!device_uuid[@]}; do
			echo "[${device_uuid[$INDEX]}]" >> /boot/config/plugins/drive_mount/drive_mount.cfg
			echo "DRIVE_ID=\"${device_id[$INDEX]}\"" >> /boot/config/plugins/drive_mount/drive_mount.cfg
			echo "DRIVE_NAME=\"${device_disk[$INDEX]}\"" >> /boot/config/plugins/drive_mount/drive_mount.cfg
			echo "DRIVE_MOUNT=\"${device_mount[$INDEX]}\"" >> /boot/config/plugins/drive_mount/drive_mount.cfg
			echo "DRIVE_MOUNTED=\"${device_mounted[$INDEX]}\"" >> /boot/config/plugins/drive_mount/drive_mount.cfg
			echo "DRIVE_ENABLED=\"${device_enabled[$INDEX]}\"" >> /boot/config/plugins/drive_mount/drive_mount.cfg
			echo "SMB_EXPORT=\"${device_smb_export[$INDEX]}\"" >> /boot/config/plugins/drive_mount/drive_mount.cfg
			echo "SMB_SEC=\"${device_smb_sec[$INDEX]}\"" >> /boot/config/plugins/drive_mount/drive_mount.cfg
		done
}

cfg.parser () {
	if [[ `grep -F "[" $1` != "" ]]; then
		ini="$(<$1)"				# read the file
		ini="${ini//[/\[}"			# escape [
		ini="${ini//]/\]}"			# escape ]
		IFS=$'\n' && ini=( ${ini} ) # convert to line-array
		ini=( ${ini[*]//;*/} )		# remove comments with ;
		ini=( ${ini[*]//#*/} )		# remove comments with #
		ini=( ${ini[*]/\	=/=} )	# remove tabs before =
		ini=( ${ini[*]/=\	/=} )	# remove tabs be =
		ini=( ${ini[*]/\ =\ /=} )	# remove anything with a space around =
		ini=( ${ini[*]/#\\[/\}$'\n'cfg.section.} ) # set section prefix
		ini=( ${ini[*]/%\\]/ \(} )	  # convert text2function (1)
		ini=( ${ini[*]/=/=\( } )	# convert item to array
		ini=( ${ini[*]/%/ \)} )		# close array parenthesis
		ini=( ${ini[*]/%\\ \)/ \\} ) # the multiline trick
		ini=( ${ini[*]/%\( \)/\(\) \{} ) # convert text2function (2)
		ini=( ${ini[*]/%\} \)/\}} ) # remove extra parenthesis
		ini[0]="" # remove first element
		ini[${#ini[*]} + 1]='}'	   # add the last brace
		eval "$(echo "${ini[*]}")" # eval the resul
	fi
}

cfg.writer () {
	IFS=' '$'\n'
	fun="$(declare -F)"
	fun="${fun//declare -f/}"
	for f in $fun; do
		[ "${f#cfg.section}" == "${f}" ] && continue
		item="$(declare -f ${f})"
		item="${item##*\{}"
		item="${item%\}}"
		item="${item//=*;/}"
		vars="${item//=*/}"
		eval $f
		echo "[${f#cfg.section.}]"
		for var in $vars; do
			echo $var=\"${!var}\"
		done
	done
}

update_drives() {
	function exists_name {
		for INDEX in ${!drive_name[@]}; do
			if [ "${drive_name[$INDEX]}" == "$1" ]; then
				echo "$INDEX"
			fi
		done
	}
	
	# if disks.ini is found, check for new drives and remove array drives from list
	if [ -f /var/local/emhttp/disks.ini ]; then
		exec </var/local/emhttp/disks.ini
		let a=0
		while read ini
		do
			case $ini in
				deviceSb*)
					continue #ignore deviceSb lines in disks.ini
				;;
				device*)
					device=`echo "$ini" | sed -e "s/\([^=]*\)=\([^=]*\)/\2/" -e "s/\\r//" -e "s/\"//g"`
					drive_name[$a]="$device"
					let a=a+1
			esac
		done
		
		let a=0
		disks=`ls --time-style="+%Y-%m-%d %I:%M%p" /dev/disk/by-uuid/* -l | cut -c64-`
		
		while IFS=$'\n' read -ra VAR; do 
			for i in "${VAR[@]}"
			do
				partition=`echo $i | cut -d " " -f 3 | cut -c7-`
				disk=`echo $partition | cut -c-3`
				uuid=`echo $i | cut -d " " -f 1`
				
				m=`mount | grep "/dev/$partition" | cut -d " " -f 3 | cut -c6-`
				
				# check if not part of array
				if [ "$(exists_name $disk)" == "" ]; then
					
					id=`ls --time-style="+%Y-%m-%d %I:%M%p" /dev/disk/by-id/* -l | grep -v -- "-part" | grep -v -- "wwn" | grep -v -- "scsi-SATA" | grep "/$disk" | cut -c66- | cut -d " " -f 1`
					
					fn_exists "cfg.section.$uuid"
					if [ $? -eq 0 ]; then
						cfg.section.$uuid
						
						old_mount=$DRIVE_MOUNT
						old_enabled=$DRIVE_ENABLED
						old_smb_export=$SMB_EXPORT
						old_smb_sec=$SMB_SEC
					else
						old_mount=""
						old_enabled=""
						old_smb_export=""
						old_smb_sec=""
					fi
					
					if [ "$m" != "" ]; then
						enabled="enable"
					elif [ "$old_enabled" == "" ]; then
						enabled="disable"
					else
						enabled=$old_enabled
					fi

					if [[ "$old_mount" == "" || "$old_mount" == "$m" ]]; then
						mpoint=$m
					elif [ "$m" == "" ]; then
						mpoint=$old_mount
					fi

					if [ "$m" != "" ]; then
						mounted="enable"
					else
						mounted="disable"
					fi
					
					device_uuid[$a]="$uuid"
					device_disk[$a]="$partition"
					device_id[$a]="$id"
					device_mount[$a]="$mpoint"
					device_mounted[$a]="$mounted"
					device_enabled[$a]="$enabled"
					device_smb_export[$a]="$old_smb_export"
					device_smb_sec[$a]="$old_smb_sec"
					
					let a=a+1
				fi
			done
		done <<< "$disks"
	else # otherwise just check if drives in config are mounted
		let a=0
		
		disks=`ls --time-style="+%Y-%m-%d %I:%M%p" /dev/disk/by-uuid/* -l | cut -c64-`
		while IFS=$'\n' read -ra VAR; do
			for i in "${VAR[@]}"; do
				partition=`echo $i | cut -d " " -f 3 | cut -c7-`
				disk=`echo $partition | cut -c-3`
				uuid=`echo $i | cut -d " " -f 1`

				m=`mount | grep "/dev/$partition" | cut -d " " -f 3 | cut -c6-`
				
				id=`ls --time-style="+%Y-%m-%d %I:%M%p" /dev/disk/by-id/* -l | grep -v -- "-part" | grep -v -- "wwn" | grep -v -- "scsi-SATA" | grep "/$disk" | cut -c66- | cut -d " " -f 1`
				
				fn_exists "cfg.section.$uuid"
				if [ $? -eq 0 ]; then
					cfg.section.$uuid
					
					if [ "$m" != "" ]; then
						mounted="enable"
					else
						mounted="disable"
					fi
					
					device_uuid[$a]="$uuid"
					device_disk[$a]="$partition"
					device_id[$a]="$id"
					device_mount[$a]="$DRIVE_MOUNT"
					device_mounted[$a]="$mounted"
					device_enabled[$a]="$DRIVE_ENABLED"
					device_smb_export[$a]="$SMB_EXPORT"
					device_smb_sec[$a]="$SMB_SEC"
					
					let a=a+1
					
				else
					continue
				fi
			done
		done <<< "$disks"
	fi
	
}

mount_all()
{
	for INDEX in "${!device_id[@]}"; do
		if [[ ${device_enabled[$INDEX]} == "enable" && ${device_mounted[$INDEX]} != "enable" ]]; then
			if [[ ! -d /mnt/${device_mount[$INDEX]} || ! "$(ls -A /mnt/${device_mount[$INDEX]})" ]]; then
				mount_drive ${device_uuid[$INDEX]} ${device_mount[$INDEX]} ${device_disk[$INDEX]}
			fi
		fi
	done
	
	update_drives
	write_config
	sleep 2
	smb_update
}

mount_drive()
{
	diskuuid=$1
	mountpoint=/mnt/$2
	diskname=$3
	
	filesystem=`blkid -o value -s TYPE "/dev/disk/by-uuid/$diskuuid"`
	if [ -z "$filesystem" ]
	then
		echo "Error opening partition or maybe no filesystem exists, cannot be mounted for device: $diskid"
		exit 1
	fi
	
	case "$filesystem" in
	'reiserfs')
		echo "mounting $diskname"
		mkdir -p $mountpoint
		mount -o noatime,nodiratime -t reiserfs -U $diskuuid $mountpoint 2>&1
		chown nobody:users $mountpoint
		chmod 770 $mountpoint
	;;
	'ntfs')
		if [ -f /bin/ntfs-3g ]
		then
			echo "mounting $diskid"
			mkdir -p $mountpoint
			mount -o umask=111,dmask=000 -t ntfs-3g -U $diskuuid $mountpoint 2>&1
			chown nobody:users $mountpoint
			chmod 770 $mountpoint
		else
			# mount the partition using the built in ntfs driver which is a readonly driver...
			echo "mounting $diskid"
			mkdir -p $mountpoint
			mount -r -o umask=111,dmask=000 -t ntfs -U $diskuuid $mountpoint 2>&1
			chown nobody:users $mountpoint
			chmod 770 $mountpoint
		fi
	;;
	'vfat')
		echo "mounting $diskid"
		mkdir -p $mountpoint
		mount -o rw,noauto,users,gid=users,exec,dmask=007,fmask=007,umask=017,noatime,nodiratime,shortname=mixed -t vfat -U $diskuuid $mountpoint 2>&1
	;;
	'msdos')
		echo "mounting $diskid"
		mkdir -p $mountpoint
		mount -r -t msdos -U $diskuuid $mountpoint 2>&1
		chown nobody:users $mountpoint
		chmod 770 $mountpoint
	;;
	'ext2')
		echo "mounting $diskid"
		mkdir -p $mountpoint
		mount -r -t ext2 -U $diskuuid $mountpoint 2>&1
		chown nobody:users $mountpoint
		chmod 770 $mountpoint
	;;
	'ext3')
		echo "mounting $diskid"
		mkdir -p $mountpoint
		# no support for ext3, try to mount it as ext2.
		mount -r -t ext2 -U $diskuuid $mountpoint 2>&1
		chown nobody:users $mountpoint
		chmod 770 $mountpoint
	;;
	'hfsplus')
		echo "mounting $diskid"
		mkdir -p $mountpoint
		mount -t hfsplus -U $diskuuid $mountpoint 2>&1
		chown nobody:users $mountpoint
		chmod 770 $mountpoint
	;;
	*)
		# mount the partition ...
		echo "Mounting filesystem for $diskid not attempted: Filesystem ($filesystem) is not supported."
		exit
	;;
	esac
}

enable_drive()
{
	function exists_id {
		for INDEX in ${!device_uuid[@]}; do
			if [ "${device_uuid[$INDEX]}" == "$1" ]; then
				echo "$INDEX"
			fi
		done
	}
	
	a=$(exists_id $1)
	fn_exists "cfg.section.$1"
	if [ $? -eq 0 ]; then
		cfg.section.$1
		
		if [ $DRIVE_MOUNTED != "enable" ]; then
			device_mount[$a]=$2
			
			if [[ ! -d $2 || ! "$(ls -A $2)" ]]; then
				mount_drive $1 $2
				device_enabled[$a]="enable"
			fi
			write_config
		fi
	fi
	update_drives
	smb_update
}

disable_drive()
{
	function exists_id {
		for INDEX in ${!device_uuid[@]}; do
			if [ "${device_uuid[$INDEX]}" == "$1" ]; then
				echo "$INDEX"
			fi
		done
	}
	
	a=$(exists_id $1)
	fn_exists "cfg.section.$1"
	if [ $? -eq 0 ]; then
		cfg.section.$1
		
		device_enabled[$a]="disable"
		if [ $DRIVE_MOUNTED == "enable" ]; then
			umount /dev/disk/by-uuid/$1
			rmdir /mnt/$DRIVE_MOUNT
		else
			device_mount[$a]=$2
		fi
		write_config
	fi
	
	smb_update
}

fn_exists()
{
	type $1 2>/dev/null | grep -q 'is a function'
}

smb_update()
{
	rm -f /boot/config/plugins/drive_mount/drive_smb_shares.cfg
	touch /boot/config/plugins/drive_mount/drive_smb_shares.cfg
	
	for INDEX in "${!device_uuid[@]}"; do
		if [[ ${device_enabled[$INDEX]} == "enable" && ${device_mounted[$INDEX]} == "enable" ]]; then
			if [[ ${device_smb_export[$INDEX]} != "-" ]]; then
				echo "[${device_mount[$INDEX]}]" >> /boot/config/plugins/drive_mount/drive_smb_shares.cfg
				echo "	path = /mnt/${device_mount[$INDEX]}" >> /boot/config/plugins/drive_mount/drive_smb_shares.cfg
				echo "	browseable = yes" >> /boot/config/plugins/drive_mount/drive_smb_shares.cfg
				echo "	public = yes" >> /boot/config/plugins/drive_mount/drive_smb_shares.cfg
				echo "	writeable = yes" >> /boot/config/plugins/drive_mount/drive_smb_shares.cfg
			fi
		fi
	done
	echo "restarting SMB"
	CMDLINE="/etc/rc.d/rc.samba restart"
	nohup $CMDLINE > /dev/null 2>&1 &
	sleep 1
	echo "... OK"
}

smb_config()
{
	function exists_id {
		for INDEX in ${!device_uuid[@]}; do
			if [ "${device_uuid[$INDEX]}" == "$1" ]; then
				echo "$INDEX"
			fi
		done
	}
	
	a=$(exists_id $1)
	
	fn_exists "cfg.section.$1"
	if [ $? -eq 0 ]; then
		cfg.section.$1

		device_smb_export[$a]=$2
		device_smb_sec[$a]=$3
		write_config
	fi
	
	smb_update
}


# read our configuration
cfg.parser '/boot/config/plugins/drive_mount/drive_mount.cfg'

update_drives

case "$1" in
'update')
  write_config
  ;;
'enable')
  enable_drive $2 $3
  ;;
'disable')
  disable_drive $2 $3
  ;;
'mount')
  mount_all
  ;;
'smb_config')
  smb_config $2 $3 $4
  ;;
'smb_update')
  smb_update
  ;;
*)
  echo "usage $0 enable|disable|mount|update|smb_update"
esac

]]>
</INLINE>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/drive_mount/drive_mount.page">
<INLINE>
<![CDATA[
Menu="OtherSettings"
Icon="drive_mount.png"
Version="0.2"
Author="Benjamin Waller"
Type="php"
Title="Mount Drives"
]]>
</INLINE>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/drive_mount/drive_mount.png">
<LOCAL>/boot/config/plugins/drive_mount/drive_mount.png</LOCAL>
</FILE>

<FILE Name="/usr/local/emhttp/plugins/drive_mount/drive_mount.php">
<INLINE>
<![CDATA[
<?PHP
shell_exec("/boot/config/plugins/drive_mount/drive_mount.sh update");
$drive_mount_cfg = parse_ini_file( "/boot/config/plugins/drive_mount/drive_mount.cfg",TRUE);

?>
<script type="text/javascript">
function checkMOUNTED(form,mounted)
{
   if (mounted == "enable") {
      form.arg3.readOnly = true;
	  //form.smb_select.disabled = true;
   }
   else {
      form.arg3.readOnly = (form.arg1.value == "enable");
	  //form.smb_select.disabled = (form.arg1.value == "enable");
   }
}

/*function checkSMB(form)
{
	form.arg4.value = form.smb_select.options[form.smb_select.selectedIndex].value;
}
*/
</script>

<?PHP
$total_drives = count($drive_mount_cfg);
$i++;
foreach ($drive_mount_cfg as $drive_uuid => $drive_values)
{
	
?>
   <form name="drive_mount_settings_<?=$i?>" method="POST" action="/update.htm" target="progressFrame">
      <input type="hidden" name="cmd" value="/boot/config/plugins/drive_mount/drive_mount.sh">
	  <input type="hidden" name="arg2" value="<?=$drive_uuid?>">
      <table class="settings">
         <tr>
         <td>Drive:</td>
         <td><?=$drive_values['DRIVE_ID']?> (<?=$drive_values['DRIVE_NAME']?>)</td>
         </tr>
		 <tr>
         <td>Enable Drive:</td>
         <td><select name="arg1" size="1"  onChange="checkMOUNTED(this.form,'<?=$drive_values['DRIVE_MOUNTED']?>');">
            <?=mk_option($drive_values['DRIVE_ENABLED'], "disable", "No");?>
            <?=mk_option($drive_values['DRIVE_ENABLED'], "enable", "Yes");?>
            </select></td>
         </tr>
         <tr>
         <td>Drive name:</td>
         <td><input type="text" name="arg3" maxlength="100" value="<?=$drive_values['DRIVE_MOUNT'];?>"></td>
         </tr>
         <!--<tr>
         <td>SMB share:</td>
         <td><select name="smb_select" size="1" onChange="checkSMB(this.form);">
            <?=mk_option($drive_values['SMB_SHARE'], "disable", "No");?>
            <?=mk_option($drive_values['SMB_SHARE'], "public", "Public");?>
			<?=mk_option($drive_values['SMB_SHARE'], "secure", "Secure");?>
			<?=mk_option($drive_values['SMB_SHARE'], "private", "Private");?>
			</select></td>
			<input type="hidden" name="arg4" value="<?=$drive_values['SMB_SHARE'];?>">
         </tr>-->
		 <tr>
         <td>
         </td>
         <td><input type="submit" name="runCmd" value="Apply"><button type="button" onClick="done();">Done</button></td>
         </tr>
      </table>
   </form><br>

   <? if ($var['shareSMBEnabled']=="no"): ?>
         <p class="notice">SMB is not enabled</p>
   <?    return; ?>
   <? endif; ?>
	
   <? if ($var['shareSMBEnabled']=="ads"): ?>
	
         <form method="POST" name="drive_mount_smb_settings_<?=$i?>" action="/update.htm" target="progressFrame">
			<input type="hidden" name="cmd" value="/boot/config/plugins/drive_mount/drive_mount.sh">
			<input type="hidden" name="arg1" value="smb_config">
			<input type="hidden" name="arg2" value="<?=$drive_uuid?>">
			<table class="settings">
               <tr>
               <td>Export:</td>
               <td><select name="arg3" size="1">
               <?=mk_option($drive_values['SMB_EXPORT'], "-", "No");?>
               <?=mk_option($drive_values['SMB_EXPORT'], "e", "Yes");?>
               <?=mk_option($drive_values['SMB_EXPORT'], "eh", "Yes (hidden)");?>
               </select></td>
               </tr>
               <tr>
               <td></td>
               <td><input type="submit" name="runCmd" value="Apply"><button type="button" onClick="done();">Done</button></td>
               </tr>
		    </table>
         </form>
   
   <?    return; ?>
   <? endif; ?>

      <form method="POST" name="drive_mount_smb_settings_<?=$i?>" action="/update.htm" target="progressFrame">
		 <input type="hidden" name="cmd" value="/boot/config/plugins/drive_mount/drive_mount.sh">
		 <input type="hidden" name="arg1" value="smb_config">
		 <input type="hidden" name="arg2" value="<?=$drive_uuid?>">
         <table class="settings">
            <tr>
            <td>Export:</td>
            <td><select name="arg3" size="1">
            <?=mk_option($drive_values['SMB_EXPORT'], "-", "No");?>
            <?=mk_option($drive_values['SMB_EXPORT'], "e", "Yes");?>
            <?=mk_option($drive_values['SMB_EXPORT'], "eh", "Yes (hidden)", "disabled");?>
            </select></td>
            </tr>
            <tr>
            <td>Security:</td>
            <td><select name="arg4" size="1">
            <?=mk_option($drive_values['SMB_SEC'], "public", "Public");?>
            <?=mk_option($drive_values['SMB_SEC'], "secure", "Secure", "disabled");?>
   <?       if ($var['featureSecurityUser']): ?>
               <?=mk_option($drive_values['SMB_SEC'], "private", "Private", "disabled");?>
   <?       else: ?>
               <?=mk_option($drive_values['SMB_SEC'], "private", "Private", "disabled");?>
   <?       endif; ?>
            </select></td>
            </tr>
            <tr>
            <td></td>
            <td><input type="submit" name="runCmd" value="Apply"><button type="button" onClick="done();">Done</button></td>
            </tr>
         </table>
      </form>
   <!--  
   <? if ($drive_values['SMB_SEC']=="secure"): ?>
         <form method="POST" action="/update.htm" target="progressFrame">
            <input type="hidden" name="shareName" value="<?=$name;?>">
            <table class="access_list">
   	    <tr>
   	    <td>User</td>
   	    <td>Access</td>
   	    </tr>
            
   <?          $write_list = explode(",", $sec[$name]['writeList']); ?>
            
   <?          foreach ($users as $user): ?>
   <?             if ($user['name'] == "root"): ?>
                     <input type="hidden" name="userAccess.<?=$user['idx'];?>" value="no-access">
   <?                continue; ?>
   <?             endif; ?>

   <?             if (in_array( $user['name'], $write_list)): ?>
   <?                $userAccess = "read-write"; ?>
   <?             else: ?>
   <?                $userAccess = "read-only"; ?>
   <?             endif; ?>
               
                  <tr>
                  <td><?=$user['name'];?></td>
                  <td><select name="userAccess.<?=$user['idx'];?>" size="1">
                  <?=mk_option($userAccess, "read-write", "Read/Write");?>
                  <?=mk_option($userAccess, "read-only", "Read-only");?>
                  </select></td>
                  </tr>
   <?          endforeach; ?>
            
               <tr>
               <td></td>
               <td><input type="submit" name="changeShareAccess" value="Apply"><button type="button" onClick="done();">Done</button></td>
               </tr>
            </table>
         </form>
   <? endif; ?>
 
   <? if ($drive_values['SMB_SEC']=="private"): ?>
         <form method="POST" action="/update.htm" target="progressFrame">
            <input type="hidden" name="shareName" value="<?=$name;?>">
            <table class="access_list">
   	    <tr>
   	    <td>User</td>
   	    <td>Access</td>
   	    </tr>

   <?          $read_list = explode(",", $sec[$name]['readList']); ?>
   <?          $write_list = explode(",", $sec[$name]['writeList']); ?>
            
   <?          foreach ($users as $user): ?>
   <?             if ($user['name'] == "root"): ?>
                     <input type="hidden" name="userAccess.<?=$user['idx'];?>" value="no-access">
   <?                continue; ?>
   <?             endif; ?>

   <?             if (in_array( $user['name'], $write_list)): ?>
   <?                $userAccess = "read-write"; ?>
   <?             elseif (in_array( $user['name'], $read_list)): ?>
   <?                $userAccess = "read-only"; ?>
   <?             else: ?>
   <?                $userAccess = "no-access"; ?>
   <?             endif; ?>
               
                  <tr>
                  <td><?=$user['name'];?></td>
                  <td><select name="userAccess.<?=$user['idx'];?>" size="1">
                  <?=mk_option($userAccess, "read-write", "Read/Write");?>
                  <?=mk_option($userAccess, "read-only", "Read-only");?>
                  <?=mk_option($userAccess, "no-access", "No Access");?>
                  </select></td>
                  </tr>
   <?          endforeach; ?>
            
               <tr>
               <td></td>
               <td><input type="submit" name="changeShareAccess" value="Apply"><button type="button" onClick="done();">Done</button></td>
               </tr>
            </table>
         </form>
   <? endif; ?>
   -->

	<script type="text/javascript">
		checkMOUNTED(document.drive_mount_settings_<?=$i?>,'<?=$drive_values['DRIVE_MOUNTED']?>');
	</script>

<?PHP
if ($i < $total_drives) {
	echo "<hr><br><br>";
}
$i++

?>
<?PHP
}
?>

]]>
</INLINE>
</FILE>

<FILE Name="/tmp/drive_mount-install" Run="/bin/bash">
<INLINE>
<![CDATA[
# include smb share config
share_line="include = /boot/config/plugins/drive_mount/drive_smb_shares.cfg"
share_line_config=`cat /boot/config/smb-extra.conf | grep "$share_line"`

if [[ $share_line_config == "" ]]; then
	echo "$share_line" >> /boot/config/smb-extra.conf
fi

# update drives and mount enabled ones
/boot/config/plugins/drive_mount/drive_mount.sh mount

# clean up
rm /tmp/drive_mount-install
]]>
</INLINE>
</FILE>

<FILE Name="/var/log/plugins/drive_mount">
<INLINE>
<![CDATA[

]]>
</INLINE>
</FILE>

</PLUGIN>